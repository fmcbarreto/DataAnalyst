import numpy as np

np.set_printoptions(suppress = True, linewidth = 100, precision =2)

## Importing the Data

raw_data_np = np.genfromtxt("loan-data.csv", delimiter = ";", skip_header =1, autostrip = True)
raw_data_np

## Checking for Incomplete Data

np.isnan(raw_data_np).sum()

temporary_fill = np.nanmax(raw_data_np)+1
temporary_mean=np.nanmean(raw_data_np, axis =0)

temporary_mean

temporary_stats = np.array([np.nanmin(raw_data_np, axis=0),
                          temporary_mean,
                          np.nanmax(raw_data_np, axis=0)])

temporary_stats

## Splitting the Dataset

### Splitting the Columns

columns_strings = np.argwhere(np.isnan(temporary_mean)).squeeze()
columns_strings

columns_numeric = np.argwhere(np.isnan(temporary_mean) == False).squeeze()
columns_numeric

### Re-importing the Dataset

loan_data_strings = np.genfromtxt("loan-data.csv", 
                                  delimiter = ";", 
                                  skip_header =1, 
                                  autostrip = True, 
                                  usecols = columns_strings, 
                                  dtype =str)
loan_data_strings

loan_data_numeric = np.genfromtxt("loan-data.csv", 
                                  delimiter = ";", 
                                  skip_header =1, 
                                  autostrip = True, 
                                  usecols = columns_numeric, 
                                 filling_values = temporary_fill)
loan_data_numeric

### The Names of the Columns

header_full = np.genfromtxt("loan-data.csv", 
                                  delimiter = ";", 
                                  skip_footer =raw_data_np.shape[0], 
                                  autostrip = True, 
                                  dtype =str)
header_full

header_string,header_numeric = header_full[columns_strings],header_full[columns_numeric]

header_string

header_numeric

## Creating Checkpoints:

def checkpoint(file_name, checkpoint_header, checkpoint_data):
    np.savez(file_name, header = checkpoint_header, data = checkpoint_data)
    checkpoint_variable = np.load(file_name + ".npz")
    return(checkpoint_variable)

checkpoint_test=checkpoint("checkpoint-test", header_string, loan_data_strings)

checkpoint_test['data']

np.array_equal(checkpoint_test['data'],loan_data_strings)

## Manipulating String Columns

header_string

header_string[0]="issue_date"

loan_data_strings

### Issue Date

np.unique(loan_data_strings[:,0])

loan_data_strings[:,0]= np.chararray.strip(loan_data_strings[:,0],"-15")

np.unique(loan_data_strings[:,0])

months = np.array(['', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])

for i in range(13):
        loan_data_strings[:,0] = np.where(loan_data_strings[:,0] == months[i],
                                          i,
                                          loan_data_strings[:,0])

np.unique(loan_data_strings[:,0])

### Loan Status

header_string

np.unique(loan_data_strings[:,1])

np.unique(loan_data_strings[:,1]).size

status_bad = np.array(['','Charged Off','Default','Late (31-120 days)'])

loan_data_strings[:,1] = np.where(np.isin(loan_data_strings[:,1],status_bad),0,1)

np.unique(loan_data_strings[:,1])

### Term

header_string

np.unique(loan_data_strings[:,2])

loan_data_strings[:,2] = np.chararray.strip(loan_data_strings[:,2], " months")

header_string[2]="term_months"

loan_data_strings[:,2]  = np.where(loan_data_strings[:,2] == "", "60",loan_data_strings[:,2] )
loan_data_strings[:,2] 

np.unique(loan_data_strings[:,2])

### Grade and Subgrade

np.unique(loan_data_strings[:,3])

np.unique(loan_data_strings[:,4])



#### Filling Sub Grade

for i in np.unique(loan_data_strings[:,3])[1:]:
    loan_data_strings[:,4] = np.where((loan_data_strings[:,4] == '') & (loan_data_strings[:,3] == i),
                                      i + '5',
                                      loan_data_strings[:,4])

np.unique(loan_data_strings[:,4], return_counts = True)

loan_data_strings[:,4]  = np.where(loan_data_strings[:,4] == "", "H1",loan_data_strings[:,4] )
np.unique(loan_data_strings[:,4], return_counts = True) 



#### Removing Grade

loan_data_strings = np.delete(loan_data_strings,3,axis=1)

loan_data_strings[:,3]

header_string = np.delete(header_string, 3)

header_string[3]

#### Converting Sub Grade

np.unique(loan_data_strings[:,3])

keys = list(np.unique(loan_data_strings[:,3]))                         
values = list(range(1, np.unique(loan_data_strings[:,3]).shape[0] + 1)) 
dict_sub_grade = dict(zip(keys, values))

dict_sub_grade

for i in np.unique(loan_data_strings[:,3]):
        loan_data_strings[:,3] = np.where(loan_data_strings[:,3] == i, 
                                          dict_sub_grade[i],
                                          loan_data_strings[:,3])

np.unique(loan_data_strings[:,3])

### Verification Status

np.unique(loan_data_strings[:,4])

array_verified=['Source Verified','Verified']
loan_data_strings[:,4] = np.where(np.isin(loan_data_strings[:,4],array_verified),1,0)

np.unique(loan_data_strings[:,4] )



### URL

np.unique(loan_data_strings[:,5])

loan_data_strings[:,5] = np.chararray.strip(loan_data_strings[:,5],'https://www.lendingclub.com/browse/loanDetail.action?loan_id=')

header_full

loan_data_numeric[:,0].astype( dtype = np.int32)

loan_data_strings[:,5].astype( dtype = np.int32)

np.array_equal(loan_data_numeric[:,0].astype( dtype = np.int32),loan_data_strings[:,5].astype( dtype = np.int32))

loan_data_strings = np.delete(loan_data_strings, 5, axis =1)
header_string = np.delete(header_string , 5)

loan_data_strings[:,5]

loan_data_numeric[:,0]

header_numeric





### State Address

header_string[5]="state_address"



states_names, states_count = np.unique(loan_data_strings[:,5], return_counts = True)[0],np.unique(loan_data_strings[:,5], return_counts = True)[1]
states_count_sorted = np.argsort(-states_count)
states_names[states_count_sorted],states_count[states_count_sorted]

loan_data_strings[:,5] = np.where(loan_data_strings[:,5] == "",0,loan_data_strings[:,5])

states_west = np.array(['WA', 'OR','CA','NV','ID','MT', 'WY','UT','CO', 'AZ','NM','HI','AK'])
states_south = np.array(['TX','OK','AR','LA','MS','AL','TN','KY','FL','GA','SC','NC','VA','WV','MD','DE','DC'])
states_midwest = np.array(['ND','SD','NE','KS','MN','IA','MO','WI','IL','IN','MI','OH'])
states_east = np.array(['PA','NY','NJ','CT','MA','VT','NH','ME','RI'])

https://www2.census.gov/geo/pdfs/maps-data/maps/reference/us_regdiv.pdf

loan_data_strings[:,5] = np.where(np.isin(loan_data_strings[:,5],states_west),1,loan_data_strings[:,5])
loan_data_strings[:,5] = np.where(np.isin(loan_data_strings[:,5],states_south),2,loan_data_strings[:,5])
loan_data_strings[:,5] = np.where(np.isin(loan_data_strings[:,5],states_midwest),3,loan_data_strings[:,5])
loan_data_strings[:,5] = np.where(np.isin(loan_data_strings[:,5],states_east),4,loan_data_strings[:,5])

np.unique(loan_data_strings[:,5])

## Converting to Numbers

loan_data_strings =loan_data_strings.astype(int)

loan_data_strings



### Checkpoint 1: Strings

checkpoint_strings= checkpoint("Checkpoint-Strings",header_string,loan_data_strings)

checkpoint_strings["header"]

checkpoint_strings["data"]

np.array_equal(checkpoint_strings["data"],loan_data_strings)

## Manipulating Numeric Columns

loan_data_numeric

np.isnan(loan_data_numeric).sum()

### Substitute "Filler" Values

header_numeric

#### ID

temporary_fill

np.isin(loan_data_numeric[:,0],temporary_fill).sum()



header_numeric

#### Temporary Stats

temporary_stats[:,columns_numeric]

#### Funded Amount

loan_data_numeric[:,2] 

loan_data_numeric[:,2] = np.where(loan_data_numeric[:,2] == temporary_fill, 
                                  temporary_stats[0, columns_numeric[2]],
                                  loan_data_numeric[:,2])
loan_data_numeric[:,2]

temporary_stats[0,3]

#### Loaned Amount, Interest Rate, Total Payment, Installment

header_numeric

for i in [1,3,4,5]:
    loan_data_numeric[:,i] = np.where(loan_data_numeric[:,i] == temporary_fill, 
                                  temporary_stats[2, columns_numeric[i]],
                                  loan_data_numeric[:,i])

  loan_data_numeric

### Currency Change

#### The Exchange Rate

EUR_USD =np.genfromtxt("EUR-USD.csv", delimiter = ",", autostrip = True, skip_header = 1, usecols=3)
EUR_USD

loan_data_strings[:,0]

exchange_rate = loan_data_strings[:,0]
for i in range(1,13):
    exchange_rate = np.where(exchange_rate == i,
                             EUR_USD[i-1],
                             exchange_rate)    
    
exchange_rate = np.where(exchange_rate == 0,
                             np.mean(EUR_USD),
                             exchange_rate)    

exchange_rate 

exchange_rate.shape

loan_data_numeric.shape

exchange_rate = np.reshape(exchange_rate, (10000,1))

loan_data_numeric = np.hstack((loan_data_numeric,exchange_rate))

header_numeric = np.concatenate ((header_numeric, np.array(["exchange_rate"])))
header_numeric

#### From USD to EUR

header_numeric

columns_dollar = np.array([1,2,4,5])

loan_data_numeric[:,6]

for i in columns_dollar:
    loan_data_numeric = np.hstack((loan_data_numeric, np.reshape(loan_data_numeric[:,i] / loan_data_numeric[:,6], (10000,1))))

loan_data_numeric.shape

loan_data_numeric

#### Expanding the header

header_additional = np.array([column_name + '_EUR' for column_name in header_numeric[columns_dollar]])

header_additional

header_numeric = np.concatenate((header_numeric, header_additional))

header_numeric

header_numeric[columns_dollar] = np.array([column_name + '_USD' for column_name in header_numeric[columns_dollar]])

header_numeric

columns_index_order = [0,1,7,2,8,3,4,9,5,10,6]

header_numeric = header_numeric[columns_index_order]

loan_data_numeric

loan_data_numeric=loan_data_numeric[:,columns_index_order]

### Interest Rate

header_numeric

loan_data_numeric[:,5]

loan_data_numeric[:,5]= loan_data_numeric[:,5]/100

loan_data_numeric

### Checkpoint 2: Numeric

checkpoint_numeric = checkpoint("Checkpoint-Numeric", header_numeric, loan_data_numeric)

checkpoint_numeric['header'], checkpoint_numeric['data']

## Creating the "Complete" Dataset

checkpoint_strings['data'].shape

checkpoint_numeric['data'].shape

loan_data =np.hstack((checkpoint_numeric['data'],checkpoint_strings['data']))

loan_data

np.isnan(loan_data).sum()

header_full =np.concatenate((checkpoint_numeric['header'],checkpoint_strings['header']))

## Sorting the New Dataset

loan_data =loan_data[np.argsort(loan_data[:,0])]

loan_data

np.argsort(loan_data[:,0])

## Storing the New Dataset

loan_data=np.vstack((header_full,loan_data))

loan_data

np.savetxt("loan-data-prepocessed.csv",loan_data, fmt= "%s",delimiter=",")







